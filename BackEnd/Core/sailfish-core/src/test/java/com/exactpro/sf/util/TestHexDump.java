/******************************************************************************
 * Copyright 2009-2018 Exactpro (Exactpro Systems Limited)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
package com.exactpro.sf.util;

import org.junit.Test;

import com.exactpro.sf.common.util.HexDumper;

import junit.framework.Assert;

public class TestHexDump {

	@Test
	public void testHexDump()
	{
        byte[] b = "8=FIXT.1.1\0019=467\00135=AE\00149=PTGW\00156=User4\00134=409\00152=20100408-16:49:12.581\0011128=9\00135=AE\001487=0\00148=GB0031215220\00122=4\00132=600\00131=234.5\00160=20100408-16:49:12.528\00164=20100408\001574=4\001552=1\00154=2\00111=1270745351693\00137=O107I6_192\0011427=E107I6_369\001528=A\001453=4\001448=TEST\001447=C\001452=1\001448=User3\001447=C\001452=12\001448=User3\001447=C\001452=76\001448=Euro\001447=C\001452=17\001581=1\0011180=1\0011181=116\0011350=115\0011352=N\0011003=T107I6_64\001856=0\0011123=0\001828=0\001820=Z107I6_191\001150=F\00120111=1\001571=L107II_116\001455=GB0031215220\001456=4\00155=CCLl\00115=GBX\00110=174\001".getBytes();

        String expected = "00000000: 383d 4649 5854 2e31 2e31 0139 3d34 3637  8=FIXT.1.1.9=467\r\n" +
                "00000010: 0133 353d 4145 0134 393d 5054 4757 0135  .35=AE.49=PTGW.5\r\n" +
                "00000020: 363d 5573 6572 3401 3334 3d34 3039 0135  6=User4.34=409.5\r\n" +
                "00000030: 323d 3230 3130 3034 3038 2d31 363a 3439  2=20100408-16:49\r\n" +
                "00000040: 3a31 322e 3538 3101 3131 3238 3d39 0133  :12.581.1128=9.3\r\n" +
                "00000050: 353d 4145 0134 3837 3d30 0134 383d 4742  5=AE.487=0.48=GB\r\n" +
                "00000060: 3030 3331 3231 3532 3230 0132 323d 3401  0031215220.22=4.\r\n" +
                "00000070: 3332 3d36 3030 0133 313d 3233 342e 3501  32=600.31=234.5.\r\n" +
                "00000080: 3630 3d32 3031 3030 3430 382d 3136 3a34  60=20100408-16:4\r\n" +
                "00000090: 393a 3132 2e35 3238 0136 343d 3230 3130  9:12.528.64=2010\r\n" +
                "000000a0: 3034 3038 0135 3734 3d34 0135 3532 3d31  0408.574=4.552=1\r\n" +
                "000000b0: 0135 343d 3201 3131 3d31 3237 3037 3435  .54=2.11=1270745\r\n" +
                "000000c0: 3335 3136 3933 0133 373d 4f31 3037 4936  351693.37=O107I6\r\n" +
                "000000d0: 5f31 3932 0131 3432 373d 4531 3037 4936  _192.1427=E107I6\r\n" +
                "000000e0: 5f33 3639 0135 3238 3d41 0134 3533 3d34  _369.528=A.453=4\r\n" +
                "000000f0: 0134 3438 3d54 4553 5401 3434 373d 4301  .448=TEST.447=C.\r\n" +
                "00000100: 3435 323d 3101 3434 383d 5573 6572 3301  452=1.448=User3.\r\n" +
                "00000110: 3434 373d 4301 3435 323d 3132 0134 3438  447=C.452=12.448\r\n" +
                "00000120: 3d55 7365 7233 0134 3437 3d43 0134 3532  =User3.447=C.452\r\n" +
                "00000130: 3d37 3601 3434 383d 4575 726f 0134 3437  =76.448=Euro.447\r\n" +
                "00000140: 3d43 0134 3532 3d31 3701 3538 313d 3101  =C.452=17.581=1.\r\n" +
                "00000150: 3131 3830 3d31 0131 3138 313d 3131 3601  1180=1.1181=116.\r\n" +
                "00000160: 3133 3530 3d31 3135 0131 3335 323d 4e01  1350=115.1352=N.\r\n" +
                "00000170: 3130 3033 3d54 3130 3749 365f 3634 0138  1003=T107I6_64.8\r\n" +
                "00000180: 3536 3d30 0131 3132 333d 3001 3832 383d  56=0.1123=0.828=\r\n" +
                "00000190: 3001 3832 303d 5a31 3037 4936 5f31 3931  0.820=Z107I6_191\r\n" +
                "000001a0: 0131 3530 3d46 0132 3031 3131 3d31 0135  .150=F.20111=1.5\r\n" +
                "000001b0: 3731 3d4c 3130 3749 495f 3131 3601 3435  71=L107II_116.45\r\n" +
                "000001c0: 353d 4742 3030 3331 3231 3532 3230 0134  5=GB0031215220.4\r\n" +
                "000001d0: 3536 3d34 0135 353d 4343 4c6c 0131 353d  56=4.55=CCLl.15=\r\n" +
                "000001e0: 4742 5801 3130 3d31 3734 01              GBX.10=174.\r\n";

		String actual = HexDumper.getHexdump(b);

		Assert.assertEquals(expected, actual);
		
		b = new byte[] {(byte)'\377'};

		expected = "00000000: ff                                       .\r\n";
		actual = HexDumper.getHexdump(b);
		Assert.assertEquals(expected, actual);
	}
}
